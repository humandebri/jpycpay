type AssetInfo = record {
  status : AssetStatus;
  evm_address : text;
  asset : principal;
  fee_bps : nat16;
};
type AssetStatus = variant { Active; Disabled; Deprecated };
type InfoResponse = record {
  cycles_balance : nat;
  relayer_addr : text;
  assets : vec AssetInfo;
  threshold_wei : nat;
  gas_wei : nat;
};
type InitArgs = record {
  daily_cap_token : opt nat64;
  ecdsa_key_name : text;
  priority_multiplier : opt float64;
  ecdsa_derivation_path : opt vec blob;
  rate_limit_per_min : opt nat32;
  chain_id : opt nat;
  threshold_wei : opt nat;
  admins : vec principal;
  max_fee_multiplier : opt float64;
};
type LogEntry = record {
  id : nat64;
  to : text;
  ts : nat64;
  tx : opt text;
  status : text;
  value : nat;
  from : text;
  fail_reason : opt text;
};
type Result = variant { Ok : nat; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type SubmitAuthorizationRequest = record {
  to : blob;
  valid_after : nat;
  asset : principal;
  valid_before : nat;
  value : nat;
  from : blob;
  sig_r : blob;
  sig_s : blob;
  sig_v : nat8;
  nonce : blob;
};
service : (opt InitArgs) -> {
  add_asset : (principal, text, nat) -> ();
  deprecate_asset : (principal) -> ();
  disable_asset : (principal) -> ();
  get_relayer_address : () -> (opt text) query;
  info : () -> (InfoResponse) query;
  logs : (opt nat64, nat32) -> (vec LogEntry) query;
  pause : (bool) -> ();
  refresh_gas_balance : () -> (Result);
  set_chain_id : (nat) -> ();
  set_ecdsa_derivation_path : (vec blob) -> ();
  set_relayer_address : (text) -> ();
  set_rpc_target : (principal, text) -> ();
  set_threshold : (nat) -> ();
  submit_authorization : (SubmitAuthorizationRequest) -> (Result_1);
}